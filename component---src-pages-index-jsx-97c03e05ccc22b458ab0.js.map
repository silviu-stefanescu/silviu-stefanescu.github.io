{"version":3,"sources":["webpack:///./src/pages/index.jsx"],"names":["ListWrapper","styled","projectEdges","data","allMdx","nodes","location","trail","useTrail","from","height","to","pathname","testid","style","key","node","index","pageQuery"],"mappings":"2FAAA,8GASMA,GATN,UASoBC,IAAH,6EAAGA,CAAH,CAAjB,uFAmCA,UA7Bc,SAAC,GAKR,IAHcC,EAGf,EAJJC,KACEC,OAAUC,MAEZC,EACI,EADJA,SAEMC,EAAQC,YAASN,EAAD,OAAsB,CAC1CO,KAAM,CAAEC,OAAQ,MAChBC,GAAI,CAAED,OAAQ,UAGlB,OACI,uBAAQE,SAAUN,EAASM,UACzB,sBADF,MAEE,sBAFF,MAGE,yBACGL,EAAA,KAAU,qBACT,uBACEM,OAAM,eADR,EAEEC,MAFF,EAGEC,IAAKb,YAHP,KAIEc,KAAMd,EAAae,WA+BxB,IAAMC,EAAN,c","file":"component---src-pages-index-jsx-97c03e05ccc22b458ab0.js","sourcesContent":["/* eslint react/display-name: 0 */\r\nimport React from 'react'\r\nimport { graphql } from 'gatsby'\r\nimport PropTypes from 'prop-types'\r\nimport { useTrail } from 'react-spring'\r\nimport styled from 'styled-components'\r\nimport { Layout, ProjectItem, Intro, Cta } from '../components'\r\nimport  '../styles/index.scss';\r\n\r\nconst ListWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\r\n  width: 100%;\r\n`\r\n\r\nconst Index = ({\r\n  data: {\r\n    allMdx: { nodes: projectEdges },\r\n  },\r\n  location,\r\n}) => {\r\n  const trail = useTrail(projectEdges.length, {\r\n    from: { height: '0%' },\r\n    to: { height: '100%' },\r\n  })\r\n\r\nreturn (\r\n    <Layout pathname={location.pathname}>\r\n      <Intro></Intro>\r\n      <Cta></Cta>\r\n      <ListWrapper>\r\n        {trail.map((style, index) => (\r\n          <ProjectItem\r\n            testid={`projectItem-${index}`}\r\n            style={style}\r\n            key={projectEdges[index].fields.slug}\r\n            node={projectEdges[index]}\r\n          />\r\n        ))}\r\n      </ListWrapper>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default Index\r\n\r\nIndex.propTypes = {\r\n  data: PropTypes.shape({\r\n    allMdx: PropTypes.shape({\r\n      nodes: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          fields: PropTypes.shape({\r\n            slug: PropTypes.string,\r\n          }),\r\n          frontmatter: PropTypes.shape({\r\n            service: PropTypes.string,\r\n            color: PropTypes.string,\r\n            client: PropTypes.string,\r\n            cover: PropTypes.any,\r\n          }),\r\n        })\r\n      ),\r\n    }),\r\n  }).isRequired,\r\n  location: PropTypes.object.isRequired,\r\n}\r\n\r\nexport const pageQuery = graphql`\r\n  query IndexQuery {\r\n    allMdx(\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { fields: { sourceInstanceName: { eq: \"projects\" } } }\r\n      limit: 4\r\n    ) {\r\n      nodes {\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          service\r\n          color\r\n          client\r\n          cover {\r\n            childImageSharp {\r\n              fluid(maxWidth: 850, quality: 90, traceSVG: { color: \"#f3f3f3\" }) {\r\n                ...GatsbyImageSharpFluid_withWebp_tracedSVG\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}