{"version":3,"sources":["webpack:///./src/pages/works.jsx","webpack:///./src/images/works-bg-4.jpg"],"names":["Content","styled","Title","animated","ListWrapper","projectEdges","data","allMdx","nodes","location","trail","useTrail","from","height","to","titleProps","useSpring","config","opacity","transform","contentProps","delay","pathname","single","className","src","alt","type","data-testid","style","testid","key","node","index","pageQuery","module","exports"],"mappings":"6FAAA,mIAWMA,EAAUC,YAAH,sEAAGA,CAAH,CAAb,8FAUMC,EAAQD,YAAOE,IAAV,mEAAGF,CAAH,CAAX,kBAIMG,EAAcH,IAAH,yEAAGA,CAAH,CAAjB,sFAuDA,UAjDc,SAAC,GAKR,IAHkBI,EAGnB,EAJFC,KACIC,OAAUC,MAEdC,EACE,EADFA,SAEIC,EAAQC,YAASN,EAAD,OAAsB,CAC1CO,KAAM,CAAEC,OAAQ,QAChBC,GAAI,CAAED,OAAQ,UAGZE,EAAaC,YAAU,CACzBC,OAAQA,IADiB,KAEzBL,KAAM,CAAEM,QAAF,EAAcC,UAAW,4BAC/BL,GAAI,CAAEI,QAAF,EAAcC,UAAW,0BAG3BC,EAAeJ,YAAU,CAAEC,OAAQA,IAAV,KAAuBI,MAAvB,IAAmCT,KAAM,CAAEM,QAAS,GAAKJ,GAAI,CAAEI,QAAS,KAEvG,OACI,uBAAQI,SAAUb,EAASa,UAEvB,uBAAMC,QAAM,GACR,uBAASA,QAAM,GACV,yBAAKC,UAAL,sBAAqCC,IAArC,IAAmDC,IAAI,2BAE5D,qBAASC,KAAK,QACV,qBAAOC,cAAP,eAAkCC,MAAOd,GAPrD,gBAWI,uBAAWY,KAAK,QACZ,kBAAC,IAAD,KAAcE,MAAOT,KAGzB,yBACKV,EAAA,KAAU,qBACX,uBACIoB,OAAM,eADV,EAEID,MAFJ,EAGIE,IAAK1B,YAHT,KAII2B,KAAM3B,EAAa4B,WA+B5B,IAAMC,EAAN,c,qBCvGPC,EAAOC,QAAU,IAA0B","file":"component---src-pages-works-jsx-7c04e66a01465afa58aa.js","sourcesContent":["/* eslint react/display-name: 0 */\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\nimport bgWorks from \"../images/works-bg-4.jpg\"\r\nimport { graphql } from 'gatsby'\r\nimport { useTrail } from 'react-spring'\r\nimport { Container, Layout, Hero, BGImage, ProjectItem } from '../components'\r\nimport { animated, useSpring, config } from 'react-spring'\r\n\r\n\r\nconst Content = styled(Container)`\r\n    position: absolute;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    padding-top: 2rem;\r\n    padding-bottom: 2rem;\r\n    z-index: 3;\r\n`\r\n\r\nconst Title = styled(animated.h1)`\r\n    margin-top: 0;\r\n`\r\n\r\nconst ListWrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\r\n    width: 100%;\r\n`\r\n\r\nconst Works = ({\r\n    data: {\r\n        allMdx: { nodes: projectEdges },\r\n    },\r\n    location,\r\n}) => {\r\n  const trail = useTrail(projectEdges.length, {\r\n    from: { height: '100%' },\r\n    to: { height: '100%' },\r\n})\r\n\r\nconst titleProps = useSpring({\r\n    config: config.slow,\r\n    from: { opacity: 0, transform: 'translate3d(0, -30px, 0)' },\r\n    to: { opacity: 1, transform: 'translate3d(0, 0, 0)' },\r\n})\r\n\r\nconst contentProps = useSpring({ config: config.slow, delay: 500, from: { opacity: 0 }, to: { opacity: 1 } })\r\n\r\nreturn (\r\n    <Layout pathname={location.pathname}>\r\n\r\n        <Hero single>\r\n            <BGImage single>\r\n                 <img className=\"services__item--img\" src={bgWorks} alt=\"Front End Development\" />\r\n            </BGImage>\r\n            <Content type=\"text\">\r\n                <Title data-testid=\"single-title\" style={titleProps}> 01. Works</Title>\r\n            </Content>\r\n        </Hero>\r\n\r\n        <Container type=\"text\">\r\n            <animated.div style={contentProps} ></animated.div>\r\n        </Container>\r\n\r\n        <ListWrapper>\r\n            {trail.map((style, index) => (\r\n            <ProjectItem\r\n                testid={`projectItem-${index}`}\r\n                style={style}\r\n                key={projectEdges[index].fields.slug}\r\n                node={projectEdges[index]}\r\n            />\r\n            ))}\r\n        </ListWrapper>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default Works\r\n\r\nWorks.propTypes = {\r\n  data: PropTypes.shape({\r\n    allMdx: PropTypes.shape({\r\n      nodes: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          fields: PropTypes.shape({\r\n            slug: PropTypes.string,\r\n          }),\r\n          frontmatter: PropTypes.shape({\r\n            service: PropTypes.string,\r\n            color: PropTypes.string,\r\n            client: PropTypes.string,\r\n            cover: PropTypes.any,\r\n          }),\r\n        })\r\n      ),\r\n    }),\r\n  }).isRequired,\r\n  location: PropTypes.object.isRequired,\r\n}\r\n\r\nexport const pageQuery = graphql`\r\n  query WorksQuery {\r\n    allMdx(\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { fields: { sourceInstanceName: { eq: \"projects\" } } }\r\n    ) {\r\n      nodes {\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          service\r\n          color\r\n          client\r\n          cover {\r\n          childImageSharp {\r\n            fluid(maxWidth: 1920, quality: 90) {\r\n              ...GatsbyImageSharpFluid_withWebp\r\n            }\r\n            resize(width: 800) {\r\n              src\r\n            }\r\n          }\r\n        }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","module.exports = __webpack_public_path__ + \"static/works-bg-4-a81cab16e560f68d3bcfca8a9de06f86.jpg\";"],"sourceRoot":""}