{"version":3,"sources":["webpack:///./src/pages/index.jsx"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","react_spring__WEBPACK_IMPORTED_MODULE_2__","styled_components__WEBPACK_IMPORTED_MODULE_3__","_components__WEBPACK_IMPORTED_MODULE_4__","ListWrapper","styled","div","withConfig","displayName","componentId","Index","_ref","projectEdges","data","allMdx","nodes","location","trail","useTrail","length","from","height","to","a","createElement","pathname","map","style","index","testid","key","fields","slug","node","propTypes","PropTypes","shape","arrayOf","string","frontmatter","service","color","client","cover","any","isRequired","object"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,8BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,GAAAS,EAAAT,EAAAO,EAAAC,GAAAE,EAAAV,EAAA,KAAAW,EAAAX,EAAA,KAAAY,EAAAZ,EAAA,KASMa,GATNb,EAAA,KASoBc,IAAOC,IAAVC,WAAA,CAAAC,YAAA,qBAAAC,YAAA,gBAAGJ,CAAH,wFAMXK,EAAQ,SAAAC,GAKR,IAHeC,EAGfD,EAJJE,KACEC,OAAUC,MAEZC,EACIL,EADJK,SAEMC,EAAQC,YAASN,EAAaO,OAAQ,CAC1CC,KAAM,CAAEC,OAAQ,MAChBC,GAAI,CAAED,OAAQ,UAGlB,OACIxB,EAAA0B,EAAAC,cAACrB,EAAA,EAAD,CAAQsB,SAAUT,EAASS,UACzB5B,EAAA0B,EAAAC,cAACrB,EAAA,EAAD,MACAN,EAAA0B,EAAAC,cAACrB,EAAA,EAAD,MACAN,EAAA0B,EAAAC,cAACpB,EAAD,KACGa,EAAMS,IAAI,SAACC,EAAOC,GAAR,OACT/B,EAAA0B,EAAAC,cAACrB,EAAA,EAAD,CACE0B,OAAM,eAAiBD,EACvBD,MAAOA,EACPG,IAAKlB,EAAagB,GAAOG,OAAOC,KAChCC,KAAMrB,EAAagB,UAQhBlB,YAEfA,EAAMwB,UAAY,CAChBrB,KAAMsB,IAAUC,MAAM,CACpBtB,OAAQqB,IAAUC,MAAM,CACtBrB,MAAOoB,IAAUE,QACfF,IAAUC,MAAM,CACdL,OAAQI,IAAUC,MAAM,CACtBJ,KAAMG,IAAUG,SAElBC,YAAaJ,IAAUC,MAAM,CAC3BI,QAASL,IAAUG,OACnBG,MAAON,IAAUG,OACjBI,OAAQP,IAAUG,OAClBK,MAAOR,IAAUS,aAKxBC,WACH7B,SAAUmB,IAAUW,OAAOD,YAGtB,IAAMlD,EAAS","file":"component---src-pages-index-jsx-61eeac55b817f88d4d15.js","sourcesContent":["/* eslint react/display-name: 0 */\r\nimport React from 'react'\r\nimport { graphql } from 'gatsby'\r\nimport PropTypes from 'prop-types'\r\nimport { useTrail } from 'react-spring'\r\nimport styled from 'styled-components'\r\nimport { Layout, ProjectItem, Intro, Cta } from '../components'\r\nimport  '../styles/index.scss';\r\n\r\nconst ListWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\r\n  width: 100%;\r\n`\r\n\r\nconst Index = ({\r\n  data: {\r\n    allMdx: { nodes: projectEdges },\r\n  },\r\n  location,\r\n}) => {\r\n  const trail = useTrail(projectEdges.length, {\r\n    from: { height: '0%' },\r\n    to: { height: '100%' },\r\n  })\r\n\r\nreturn (\r\n    <Layout pathname={location.pathname}>\r\n      <Intro></Intro>\r\n      <Cta></Cta>\r\n      <ListWrapper>\r\n        {trail.map((style, index) => (\r\n          <ProjectItem\r\n            testid={`projectItem-${index}`}\r\n            style={style}\r\n            key={projectEdges[index].fields.slug}\r\n            node={projectEdges[index]}\r\n          />\r\n        ))}\r\n      </ListWrapper>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default Index\r\n\r\nIndex.propTypes = {\r\n  data: PropTypes.shape({\r\n    allMdx: PropTypes.shape({\r\n      nodes: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          fields: PropTypes.shape({\r\n            slug: PropTypes.string,\r\n          }),\r\n          frontmatter: PropTypes.shape({\r\n            service: PropTypes.string,\r\n            color: PropTypes.string,\r\n            client: PropTypes.string,\r\n            cover: PropTypes.any,\r\n          }),\r\n        })\r\n      ),\r\n    }),\r\n  }).isRequired,\r\n  location: PropTypes.object.isRequired,\r\n}\r\n\r\nexport const pageQuery = graphql`\r\n  query IndexQuery {\r\n    allMdx(\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { fields: { sourceInstanceName: { eq: \"projects\" } } }\r\n      limit: 4\r\n    ) {\r\n      nodes {\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          service\r\n          color\r\n          client\r\n          cover {\r\n            childImageSharp {\r\n              fluid(maxWidth: 850, quality: 90, traceSVG: { color: \"#f3f3f3\" }) {\r\n                ...GatsbyImageSharpFluid_withWebp_tracedSVG\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}